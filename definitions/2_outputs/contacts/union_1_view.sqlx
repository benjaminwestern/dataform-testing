config {
    type: "view",
    schema: "outputs",
    name: "union_1",
    description: "Union of all prepared sources",
    dependencies: [
        {dataset: "sources", name: "source_1"},
        {dataset: "sources", name: "source_2"},
        {dataset: "sources", name: "source_3"},
        {dataset: "sources", name: "source_4"},
        {dataset: "sources", name: "source_5"}
    ]
}

js {
    const returnSelect = true;
}

${common.generateSourceUnion(
    [
        {
            table: ref({schema: "sources", name: "source_1"}),
            name: common.generateTableName(ref({schema: "sources", name: "source_1"})),
            priority: 1,
            // Key is the output column name, value is the input column name
            columnMapping: {
                id: "user_id",
                email: "email",
                mobile: "mobile",
                created_date: "created_date",
                updated_date: "updated_date",
                first_name: "first_name",
                last_name: "last_name",
                birth_date: "birth_date"
            },
            // filter: "email IS NOT NULL"
        },
        {
            table: ref({schema: "sources", name: "source_2"}),
            name: common.generateTableName(ref({schema: "sources", name: "source_2"})),
            priority: 2,
            // Key is the output column name, value is the input column name
            columnMapping: {
                id: "crm_id",
                email: "email",
                mobile: "mobile",
                created_date: "created_date",
                updated_date: "updated_date",
                first_name: "first_name",
                last_name: "last_name",
                birth_date: "birth_date"
            },
            // filter: "email IS NOT NULL"
        },
        {
            table: ref({schema: "sources", name: "source_3"}),
            name: common.generateTableName(ref({schema: "sources", name: "source_3"})),
            priority: 3,
            // Key is the output column name, value is the input column name
            columnMapping: {
                id: "marketing_id",
                email: "email",
                mobile: "mobile",
                created_date: "created_date",
                updated_date: "updated_date",
                first_name: "first_name",
                last_name: "last_name",
                birth_date: `NULL` // Missing in source 3
            },
            // filter: "email IS NOT NULL"
        },
        {   
            table: ref({schema: "sources", name: "source_4"}),
            name: common.generateTableName(ref({schema: "sources", name: "source_4"})),
            priority: 4,
            columnMapping: {
                id: "transaction_id",
                email: "email",
                mobile: "mobile",
                created_date: "created_date",
                updated_date: "updated_date",
                first_name: "first_name",
                last_name: "last_name",
                birth_date: `NULL` // Missing in source 4
            },
            // filter: "email IS NOT NULL"
        },
        {
            table: ref({schema: "sources", name: "source_5"}),
            name: common.generateTableName(ref({schema: "sources", name: "source_5"})),
            priority: 5,
            columnMapping: {
                id: "support_id",
                email: "email",
                mobile: "mobile",
                created_date: "created_date",
                updated_date: "updated_date",
                first_name: "first_name",
                last_name: "last_name",
                birth_date: `NULL` // Missing in source 5
            },
            // filter: "email IS NOT NULL"
        }
    ],
    returnSelect
)}